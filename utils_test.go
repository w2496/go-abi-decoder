package decoder

import "testing"

var (
	test_bytecode = "0x608060405260043610610078576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680638d8f2adb1461007d578063babd701214610094578063c0ee0b8a146100bf578063d01cf41914610152578063e8742a401461017d578063fc0c546a146101e9575b600080fd5b34801561008957600080fd5b50610092610240565b005b3480156100a057600080fd5b506100a9610436565b6040518082815260200191505060405180910390f35b3480156100cb57600080fd5b50610150600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929050505061043c565b005b34801561015e57600080fd5b50610167610714565b6040518082815260200191505060405180910390f35b34801561018957600080fd5b5061019261071a565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156101d55780820151818401526020810190506101ba565b505050509050019250505060405180910390f35b3480156101f557600080fd5b506101fe6107a8565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008111151561029057fe5b600160008154809291906001900391905055506102b8816002546107cd90919063ffffffff16565b6002819055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561038257600080fd5b505af1158015610396573d6000803e3d6000fd5b505050506040513d60208110156103ac57600080fd5b810190808051906020019092919050505015156103c857600080fd5b7f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243643382604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a150565b60025481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561049457fe5b6000821115156104a057fe5b6104f282600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546107e690919063ffffffff16565b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061054a826002546107e690919063ffffffff16565b600281905550600015156105e48460048054806020026020016040519081016040528092919081815260200182805480156105da57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610590575b5050505050610804565b151514156106655760048390806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506001600081548092919060010191905055505b7f52ff2ed8f8a732b560956b48a0b78ef36b87044aeec29675bfe2468fa50e50f183600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a1505050565b60015481565b6060600480548060200260200160405190810160405280929190818152602001828054801561079e57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610754575b5050505050905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008282111515156107db57fe5b818303905092915050565b60008082840190508381101515156107fa57fe5b8091505092915050565b600080600090505b8251811015610876578373ffffffffffffffffffffffffffffffffffffffff16838281518110151561083a57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff161415610869576001915061087b565b808060010191505061080c565b600091505b50929150505600a165627a7a72305820531ccf0a409e40bb271574acc6c76a53ef7a32e2860326f95a24e74ccf651c8b0029"
	test_abi      = "[\r\n    {\r\n        \"constant\": false,\r\n        \"inputs\": [],\r\n        \"name\": \"withdrawTokens\",\r\n        \"outputs\": [],\r\n        \"payable\": false,\r\n        \"stateMutability\": \"nonpayable\",\r\n        \"type\": \"function\"\r\n    },\r\n    {\r\n        \"constant\": true,\r\n        \"inputs\": [],\r\n        \"name\": \"activeSupply\",\r\n        \"outputs\": [\r\n            {\r\n                \"name\": \"\",\r\n                \"type\": \"uint256\"\r\n            }\r\n        ],\r\n        \"payable\": false,\r\n        \"stateMutability\": \"view\",\r\n        \"type\": \"function\"\r\n    },\r\n    {\r\n        \"constant\": false,\r\n        \"inputs\": [\r\n            {\r\n                \"name\": \"from\",\r\n                \"type\": \"address\"\r\n            },\r\n            {\r\n                \"name\": \"value\",\r\n                \"type\": \"uint256\"\r\n            },\r\n            {\r\n                \"name\": \"data\",\r\n                \"type\": \"bytes\"\r\n            }\r\n        ],\r\n        \"name\": \"tokenFallback\",\r\n        \"outputs\": [],\r\n        \"payable\": false,\r\n        \"stateMutability\": \"nonpayable\",\r\n        \"type\": \"function\"\r\n    },\r\n    {\r\n        \"constant\": true,\r\n        \"inputs\": [],\r\n        \"name\": \"daoCount\",\r\n        \"outputs\": [\r\n            {\r\n                \"name\": \"\",\r\n                \"type\": \"uint256\"\r\n            }\r\n        ],\r\n        \"payable\": false,\r\n        \"stateMutability\": \"view\",\r\n        \"type\": \"function\"\r\n    },\r\n    {\r\n        \"constant\": true,\r\n        \"inputs\": [],\r\n        \"name\": \"showActiveWallets\",\r\n        \"outputs\": [\r\n            {\r\n                \"name\": \"\",\r\n                \"type\": \"address[]\"\r\n            }\r\n        ],\r\n        \"payable\": false,\r\n        \"stateMutability\": \"view\",\r\n        \"type\": \"function\"\r\n    },\r\n    {\r\n        \"constant\": true,\r\n        \"inputs\": [],\r\n        \"name\": \"token\",\r\n        \"outputs\": [\r\n            {\r\n                \"name\": \"\",\r\n                \"type\": \"address\"\r\n            }\r\n        ],\r\n        \"payable\": false,\r\n        \"stateMutability\": \"view\",\r\n        \"type\": \"function\"\r\n    },\r\n    {\r\n        \"payable\": true,\r\n        \"stateMutability\": \"payable\",\r\n        \"type\": \"fallback\"\r\n    },\r\n    {\r\n        \"anonymous\": false,\r\n        \"inputs\": [\r\n            {\r\n                \"indexed\": false,\r\n                \"name\": \"voter\",\r\n                \"type\": \"address\"\r\n            },\r\n            {\r\n                \"indexed\": false,\r\n                \"name\": \"balance\",\r\n                \"type\": \"uint256\"\r\n            }\r\n        ],\r\n        \"name\": \"DaoVote\",\r\n        \"type\": \"event\"\r\n    },\r\n    {\r\n        \"anonymous\": false,\r\n        \"inputs\": [\r\n            {\r\n                \"indexed\": false,\r\n                \"name\": \"voter\",\r\n                \"type\": \"address\"\r\n            },\r\n            {\r\n                \"indexed\": false,\r\n                \"name\": \"balance\",\r\n                \"type\": \"uint256\"\r\n            }\r\n        ],\r\n        \"name\": \"Withdraw\",\r\n        \"type\": \"event\"\r\n    }\r\n]"
)

func TestDetectBytecodes(t *testing.T) {
	idx := IndexedABI{
		Abi: *MergeABIs(test_abi),
	}

	signatures := append(idx.GetSigHashes(), idx.GetTopics()...)
	t.Log("Validated Bytecode", signatures)

	valid := DetectBytecodes(test_bytecode, signatures)
	t.Log("Validated Bytecode", valid)
}
